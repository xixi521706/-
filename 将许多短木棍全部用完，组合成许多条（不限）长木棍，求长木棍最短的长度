//s 已组成的木棒数目,len已经组成的长度，pos搜索的木棒的下标的位置
int dfs(int s,int len,int pos)
{
    if(s==total)return 1;
    for(int i=pos+1;i<num;i++)
    {
        //如果这个木棒已经用过，则继续下一根
        if(sticks[i].mark)continue;
        if(len+sticks[i].length == l)
        {
            sticks[i].mark = true;
            if(dfs(s+1,0,-1))return true;
            sticks[i].mark = false;
            //如果这根长的填下后没有成功，最多就是再用两根短的当成长的来拼，这样一定也是不成功的（因为短的比长的更灵活，之后短的都不行，长的一定不行了）
            return false;   
        }else if(sticks[i].length+len<l){
            sticks[i].mark = true;
            if(dfs(s,len+sticks[i].length,i))   return true;
            sticks[i].mark = false;
            //剪枝：如果当前搜索时，前边的长度为0，而第一根没有成功的使用，
            //说明第一根始终要被废弃，所以这种组合必定不会成功
            //此处的剪枝必须有，因为这里的剪枝会节省很多的无用搜索->这一句非常重要，高效的剪枝也是排序的原因之一 
            if(len==0)  return false;
            //剪枝：如果当前和上一次搜到的木棒是一样长的则没必要再搜一次了
            while(sticks[i].length==sticks[i+1].length) i++;
        }
    }
    return false;
}
